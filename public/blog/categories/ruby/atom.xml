<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Unbounded Optimism]]></title>
  <link href="http://www.nickmabry.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://www.nickmabry.com/"/>
  <updated>2012-07-27T13:09:02-05:00</updated>
  <id>http://www.nickmabry.com/</id>
  <author>
    <name><![CDATA[Nick Mabry]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails redirect_to Hashes]]></title>
    <link href="http://www.nickmabry.com/blog/2012/04/03/option-hashes/"/>
    <updated>2012-04-03T19:40:00-05:00</updated>
    <id>http://www.nickmabry.com/blog/2012/04/03/option-hashes</id>
    <content type="html"><![CDATA[<p>I ran across a surprise when using a Rails method a few days ago:
``` ruby rails/actionpack/lib/action_controller/metal/flash.rb
def redirect_to(options = {}, response_status_and_flash = {}) #:doc:
  if alert = response_status_and_flash.delete(:alert)</p>

<pre><code>flash[:alert] = alert
</code></pre>

<p>  end</p>

<p>  if notice = response_status_and_flash.delete(:notice)</p>

<pre><code>flash[:notice] = notice
</code></pre>

<p>  end</p>

<p>  if other_flashes = response_status_and_flash.delete(:flash)</p>

<pre><code>flash.update(other_flashes)
</code></pre>

<p>  end</p>

<p>  super(options, response_status_and_flash)
end
<code>``
The</code>redirect_to<code>method accepts two parameters. The first is the</code>options<code>object, which will be itself an options Hash, a URL String, or the symbol</code>:back<code>. The second is the</code>response_status_and_flash<code>object, which may either be omitted or may be a Hash containing a</code>status<code>key and optional</code>:alert<code>,</code>:notice<code>, and</code>:flash` keys.</p>

<p>An <code>options</code> hash may contain a <code>:status</code> key which will be used in lieu of the <code>response_status_and_flash</code> hash <code>:status</code> if present, but it will not supercede the flash keys. Here are some valid calls:</p>

<p>``` ruby Valid redirect_to Calls</p>

<h1>Redirect to url with status</h1>

<p>redirect_to post_url(@post), status: 301</p>

<h1>Redirect to url with status and flash</h1>

<p>redirect_to post_url(@post), status: 301, notice: "We've moved forever!"
redirect_to post_url(@post), notice: "We're temporarily moved", status: 302</p>

<h1>Redirect to controller action with status</h1>

<p>redirect_to action: 'atom', status: 301</p>

<h1>Redirect to controller action with status and flash</h1>

<p>redirect_to({action: 'atom', status: 301}, notice: "We've moved forever!")
redirect_to({action: 'atom'}, notice: "We're temporarily moved", status: 302)
```</p>

<p>Did the last two surprise you? When <code>options</code> is a Hash and you would like to set the response flash, the call must be constructed with
parentheses and curly braces to correctly pack in all of the arguments. It took a little experimentation and some helpful folks on IRC for me to tease out the correct syntax. And if you accidentally place a flash option inside of the <code>options</code> hash, then the call will succeed with an additional query parameter in the redirect url.</p>

<p>I'm sure I'll mess these up again at some point, so I'll just leave this here for future reference.</p>
]]></content>
  </entry>
  
</feed>
